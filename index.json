[{"categories":null,"content":" 参考链接 git-docs Git学习笔记 Become a git guru. git-stash ","date":"2022-07-19","objectID":"/posts/6/:0:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#"},{"categories":null,"content":" 1 branch 参考链接 How to Delete a Git Branch Both Locally and Remotely 在偶尔的情况下，可能会想要保留那些与你的代码没有共同祖先的分支。例如在这些分支上保留生成的文档或者其他一些东西。 如果需要创建一个不使用当前代码库作为父提交的分支，可以用如下的方法创建一个空分支。 ","date":"2022-07-19","objectID":"/posts/6/:1:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#branch"},{"categories":null,"content":" 1.1 方法1执行以下git命令： git symbolic-ref HEAD refs/heads/newbranch rm .git/index git clean -fdx \u003cdo work\u003e git add your files git commit -m 'Initial commit' ","date":"2022-07-19","objectID":"/posts/6/:1:1","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#方法1"},{"categories":null,"content":" 1.2 方法2这里以github的操作为例，下面试图创建一个名为gh-pages的空分支： $ cd repo $ git checkout --orphan gh-pages # 创建一个orphan的分支，这个分支是独立的 Switched to a new branch 'gh-pages' $ git rm -rf . # 删除原来代码树下的所有文件 rm ...... ","date":"2022-07-19","objectID":"/posts/6/:1:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#方法2"},{"categories":null,"content":" 1.3 添加内容并push注意这个时候用git branch命令是看不见当前分支的名字的，除非进行了第一次commit。 下面我们开始添加一些代码文件，例如这里新增了一个index.html: $ echo \\\"My GitHub Page\\\" \u003e index.html $ git add . $ git commit -a -m \\\"First pages commit\\\" $ git push origin gh-pages 在commit操作之后，你就可以用git branch命令看到新分支的名字了，然后push到远程仓库。 ","date":"2022-07-19","objectID":"/posts/6/:1:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#添加内容并push"},{"categories":null,"content":" 2 commit 参考链接 git 删除错误提交的commit git commit 合并 Delete Local Commits in Git 在commit之后修改注释 ","date":"2022-07-19","objectID":"/posts/6/:2:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#commit"},{"categories":null,"content":" 2.1 已经 push对于已经提交并已经 push 到远程仓库中的需要通过 git rebase 才能完成。 首先要 git rebase 到需要修改的那个 commit 的前1个 commit。假设 commit id 是 32e0a87f，运行下面的 git rebase 命令： git rebase -i 32e0a87f 在 git bash 中运行上面的命令后，会弹出编辑框，在编辑框中会分行依次显示以 pick 开头的这个 commit 之后的所有 commit message。 将需要修改的commit message之前的\"pick\"改为\"reword\"，点击保存按钮，并关闭编辑框，这时会执行rebase操作。 Rebasing (1/3) 接着会再次弹出编辑框，这次编辑框中只有之前改为\"reword\"的那个commit message，此时修改commit message的内容，点击保存按钮并关闭编辑框，会继续执行rebase操作。 如果操作成功，会出现如下的提示： [detached HEAD aa3b52c] Add return url 2 files changed, 1 insertion(+), 3 deletions(-) Successfully rebased and updated refs/heads/oss. 这样就完成了git commit message的修改，然后强制push一下就搞定了。 git push --force ","date":"2022-07-19","objectID":"/posts/6/:2:1","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#已经-push"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao \u003caoxiaojian@gmail.com\u003e Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao \u003caoxiaojian@gmail.com\u003e Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao \u003caoxiaojian@gmail.com\u003e Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao \u003caoxiaojian@gmail.com\u003e Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD \u003csha1-commit-hash\u003e HEAD^ 上一次 \u003ccommit_id\u003e 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/6/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#撤销-commit"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/6/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#背景"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/6/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#操作"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/6/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#找出提交历史记录"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/6/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#执行-reset-命令"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/6/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#执行强制的-push-命令"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/6/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#处理受保护分支"},{"categories":null,"content":" 2.3 合并 commit有时 commit 太多，而且可能一个 commit 只是提交一个小 bug ，那么合并 commit 势在必行。 2.3.1 第一种提交最后一个修改的 commit 使用参数，之前的一个 commit 将会合并到这个即将提交的 commit 中来 : git commit -a --amend -m \"my message here\"如果之前有一个提交，并且信息为: git commit -a -m \"my last commit message\" 则这个 commit message 将不存在。但该commit的信息已经合并到\"my message here\"中了。 2.3.2 第二种如果提交了最后的修改 : $ git reset --soft HEAD^ #或HEAD^意为取消最后commit $ git commit --amend 把最后一个 commit 合并到前一个提交中去，例如（由上往下读）： git add b.text git commit -a -m \"my message here\" git add a.text git commit -a -m \"my last commit message\" 最后存在的将是\"my last commit message\"。也可后退 n 个，合并到前面第 n+1 个 commit 中去： $ git reset --soft HEAD~n #后退到第n，我也不清楚具体含义。 $ git commit --amend [-m \"new message\"] 最方便的是调用 reflog 查看操作历史，找到具体的 commit id ，然后直接 git reset –hard [commit_id] 就回到你要的版本！ ","date":"2022-07-19","objectID":"/posts/6/:2:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#合并-commit"},{"categories":null,"content":" 2.3 合并 commit有时 commit 太多，而且可能一个 commit 只是提交一个小 bug ，那么合并 commit 势在必行。 2.3.1 第一种提交最后一个修改的 commit 使用参数，之前的一个 commit 将会合并到这个即将提交的 commit 中来 : git commit -a --amend -m \"my message here\"如果之前有一个提交，并且信息为: git commit -a -m \"my last commit message\" 则这个 commit message 将不存在。但该commit的信息已经合并到\"my message here\"中了。 2.3.2 第二种如果提交了最后的修改 : $ git reset --soft HEAD^ #或HEAD^意为取消最后commit $ git commit --amend 把最后一个 commit 合并到前一个提交中去，例如（由上往下读）： git add b.text git commit -a -m \"my message here\" git add a.text git commit -a -m \"my last commit message\" 最后存在的将是\"my last commit message\"。也可后退 n 个，合并到前面第 n+1 个 commit 中去： $ git reset --soft HEAD~n #后退到第n，我也不清楚具体含义。 $ git commit --amend [-m \"new message\"] 最方便的是调用 reflog 查看操作历史，找到具体的 commit id ，然后直接 git reset –hard [commit_id] 就回到你要的版本！ ","date":"2022-07-19","objectID":"/posts/6/:2:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#第一种"},{"categories":null,"content":" 2.3 合并 commit有时 commit 太多，而且可能一个 commit 只是提交一个小 bug ，那么合并 commit 势在必行。 2.3.1 第一种提交最后一个修改的 commit 使用参数，之前的一个 commit 将会合并到这个即将提交的 commit 中来 : git commit -a --amend -m \"my message here\"如果之前有一个提交，并且信息为: git commit -a -m \"my last commit message\" 则这个 commit message 将不存在。但该commit的信息已经合并到\"my message here\"中了。 2.3.2 第二种如果提交了最后的修改 : $ git reset --soft HEAD^ #或HEAD^意为取消最后commit $ git commit --amend 把最后一个 commit 合并到前一个提交中去，例如（由上往下读）： git add b.text git commit -a -m \"my message here\" git add a.text git commit -a -m \"my last commit message\" 最后存在的将是\"my last commit message\"。也可后退 n 个，合并到前面第 n+1 个 commit 中去： $ git reset --soft HEAD~n #后退到第n，我也不清楚具体含义。 $ git commit --amend [-m \"new message\"] 最方便的是调用 reflog 查看操作历史，找到具体的 commit id ，然后直接 git reset –hard [commit_id] 就回到你要的版本！ ","date":"2022-07-19","objectID":"/posts/6/:2:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#第二种"},{"categories":null,"content":" 3 merge更新github上fork的仓库 ","date":"2022-07-19","objectID":"/posts/6/:3:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#merge"},{"categories":null,"content":" 3.1 背景 在github上fork了某项目 原仓库有新的改动 想将原仓库的改动更新到自己fork的仓库 ","date":"2022-07-19","objectID":"/posts/6/:3:1","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#背景-1"},{"categories":null,"content":" 3.2 操作过程 3.2.1 同步代码以netty为例： 源地址：git@github.com:netty/netty.git 我fork的： git@github.com:skyao/netty.git 按照下面的步骤: 为本地仓库增加一个remote, 命名为\"upstream\": git remote add upstream git://github.com/dapr/dapr.git # 或者 git remote add upstream git@github.com:dapr/dapr.git 也有人推荐下面的多了–track参数的的方式: git remote add --track master upstream git://github.com/dapr/dapr.git fetch 这个upstream远程的所有分支到remote-tracking分支, 例如upstream/master git fetch upstream 确认当前分支是master分支, 如果不是checkout到master分支 git branch git checkout master 同步upstream的修改到本地, 可以选择rebase或者merge git rebase upstream/master git merge upstream/master 注: 推荐用merge. 将更新之后的版本推送到自己fork的仓库 git push -f origin master 3.2.2 同步tag git fetch upstream --tags git push --tags ","date":"2022-07-19","objectID":"/posts/6/:3:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#操作过程"},{"categories":null,"content":" 3.2 操作过程 3.2.1 同步代码以netty为例： 源地址：git@github.com:netty/netty.git 我fork的： git@github.com:skyao/netty.git 按照下面的步骤: 为本地仓库增加一个remote, 命名为\"upstream\": git remote add upstream git://github.com/dapr/dapr.git # 或者 git remote add upstream git@github.com:dapr/dapr.git 也有人推荐下面的多了–track参数的的方式: git remote add --track master upstream git://github.com/dapr/dapr.git fetch 这个upstream远程的所有分支到remote-tracking分支, 例如upstream/master git fetch upstream 确认当前分支是master分支, 如果不是checkout到master分支 git branch git checkout master 同步upstream的修改到本地, 可以选择rebase或者merge git rebase upstream/master git merge upstream/master 注: 推荐用merge. 将更新之后的版本推送到自己fork的仓库 git push -f origin master 3.2.2 同步tag git fetch upstream --tags git push --tags ","date":"2022-07-19","objectID":"/posts/6/:3:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#同步代码"},{"categories":null,"content":" 3.2 操作过程 3.2.1 同步代码以netty为例： 源地址：git@github.com:netty/netty.git 我fork的： git@github.com:skyao/netty.git 按照下面的步骤: 为本地仓库增加一个remote, 命名为\"upstream\": git remote add upstream git://github.com/dapr/dapr.git # 或者 git remote add upstream git@github.com:dapr/dapr.git 也有人推荐下面的多了–track参数的的方式: git remote add --track master upstream git://github.com/dapr/dapr.git fetch 这个upstream远程的所有分支到remote-tracking分支, 例如upstream/master git fetch upstream 确认当前分支是master分支, 如果不是checkout到master分支 git branch git checkout master 同步upstream的修改到本地, 可以选择rebase或者merge git rebase upstream/master git merge upstream/master 注: 推荐用merge. 将更新之后的版本推送到自己fork的仓库 git push -f origin master 3.2.2 同步tag git fetch upstream --tags git push --tags ","date":"2022-07-19","objectID":"/posts/6/:3:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#同步tag"},{"categories":null,"content":" 4 tag 参考链接 2.6 Git Basics - Tagging How to delete local and remote git tags (WITH EXAMPLES) Remove all git tags How To Delete Local and Remote Tags on Git 记录git中tag命令的用法。 ","date":"2022-07-19","objectID":"/posts/6/:4:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#tag"},{"categories":null,"content":" 4.1 列出已有 tag git tag git tag -l 'v1.4.2.*' ","date":"2022-07-19","objectID":"/posts/6/:4:1","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#列出已有-tag"},{"categories":null,"content":" 4.2 添加 tag添加轻量级标签： git tag -a v1.4 添加含附注类型的标签： git tag -a v1.4 -m 'my version 1.4' 推送到远程： git push origin v1.4 或者 –tags 推送全部： git push --tags ","date":"2022-07-19","objectID":"/posts/6/:4:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#添加-tag"},{"categories":null,"content":" 4.3 删除 tag删除本地 tag : git tag -d v1.0.0 删除远程指定 tag : $ git push origin --delete v2.5 To git@github.com:username/project.git - [deleted] v2.5 删除远程所有 tag : git ls-remote origin | cut -f 2 | grep -iv head | xargs git push --delete origin ","date":"2022-07-19","objectID":"/posts/6/:4:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#删除-tag"},{"categories":null,"content":" 5 remote 参考链接 Git Bash: remote error: You can’t push to git://github.com 通过set-url解决can’t push错误 如果clone时 remote 的地址信息有问题，比如通过 git clnoe git://github.com/skyao/learning-git.git 的方式 clone 下来的仓库，在改动之后push时，会报错，错误信息如下： git push fatal: 远程错误： You can't push to git://github.com/skyao/learning-git.git Use https://github.com/skyao/learning-git.git 事实上，在github 页面上，给出的clone地址是 git@github.com:skyao/learning-git.git git@github.com/skyao/learning-git.git 和前面clone下来时使用的地址仅有一个字符的差异。 解决问题的方法，可以重新用正确的地址再clone一遍。如果已经有commit，则可以使用 remote 的 set-url 子命令直接修改remote的地址： git remote set-url origin git@github.com:skyao/learning-git.git sky@B-47WAMD6R-0023 learning-git % git push Connection to github.com port 22 [tcp/ssh] succeeded! ","date":"2022-07-19","objectID":"/posts/6/:5:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#remote"},{"categories":null,"content":" 6 submodule 参考链接 Git-Tools-Submodules 下载 Project 并初始化 submodule。 # --depth=1 仅限 Project 深度，对于 submodule 无效。 git clone --recurse-submodules --depth=1 git@github.com:keunghin/blogdeploy.git 更新 submodule。 git submodule update --remote --merge ","date":"2022-07-19","objectID":"/posts/6/:6:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/6/#submodule"},{"categories":null,"content":"http://www.gstatic.com/generate_204 http://cp.cloudflare.com/generate_204 http://www.qualcomm.cn/generate_204 http://clients3.google.com/generate_204 http://www.gstatic.com/generate_204 http://connectivitycheck.gstatic.com/generate_204 http://edge.microsoft.com/captiveportal/generate_204 http://cp.cloudflare.com/generate_204 http://www.qualcomm.cn/generate_204 http://connect.rom.miui.com/generate_204 http://connectivitycheck.platform.hicloud.com/generate_204 http://wifi.vivo.com.cn/generate_204 http://204.ustclug.org http://captive.apple.com/ http://www.msftconnecttest.com/connecttest.txt http://detectportal.firefox.com/success.txt 参考链接 generate_204 测速地址 收集几个地址，帮你确认是否连接到互联网 检测网络联通性\u0026generate_204服务汇总与评测 ","date":"2022-07-18","objectID":"/posts/5/:0:0","series":null,"tags":["测速地址"],"title":"测速地址","uri":"/posts/5/#"},{"categories":null,"content":" 1 ArchLinux安装参考链接 ArchLinux Installation guide archlinux 简明指南 篝ノ雾枝的魔法学院 ","date":"2022-02-13","objectID":"/posts/3/:1:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#archlinux安装参考链接"},{"categories":null,"content":" 2 获取镜像列表 此方法写在.zshrc里，用命令行快捷进行替代。 #注意：在--sort rate中，有些镜像无法进行评分，会在命令行下弹出警号（WARNING） sudo reflector --country China --age 6 --latest 6 --fastest 6 --threads 6 --sort rate --protocol https --save /etc/pacman.d/mirrorlist 镜像下好之后，删除tuna源(好几次下载失败，用的人太多了），用bfsu或opentuna等其他镜像源。 ","date":"2022-02-13","objectID":"/posts/3/:2:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#获取镜像列表"},{"categories":null,"content":" 3 开发环境","date":"2022-02-13","objectID":"/posts/3/:3:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#开发环境"},{"categories":null,"content":" 3.1 JavaJava Java-ArchWiki sudo pacman -S java-runtime-common java-environment-common sudo pacman -S jdk8 #选择 extra/jdk8-openjdk/extra/jdk11-openjdk 使用 archlinux-java 命令来管理 Java 环境 列举 Java 环境： archlinux-java status 选择 Java 环境： sudo archlinux-java set java-8-openjdk ","date":"2022-02-13","objectID":"/posts/3/:3:1","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#java"},{"categories":null,"content":" 3.2 GoGo Go-ArchWiki sudo pacman -S go go-tools 第二种方法是 gcc-go。 若开发环境中用到 JetBrains 的 IDE 则必须使用go ，否则 IDE 无法在 /usr/lib/go 下找到 Go SDK。 原文：If you are using a Jetbrains IDE and the Go plugin cannot find your Go SDK path, you might be using an incompatible package. Remove the gcc-go package and replace it with go. If your $GOPATH is set, the IDE should now be able to find your Go SDK at /usr/lib/go. 配置环境变量 GOPATH ，放在用户目录(/usr/local/bin)下的 go/ 文件夹放置 Go 相关文件 vim ~/.zshrc # OR ~/.bashrc OR ~/.profile export GOPATH=~/go export PATH=$PATH:$GOPATH/bin 由于某些特殊的原因，国内无法很好地拉取 Go 相关的软件包。建议使用 goproxy/goproxy.cn ，只需在拉取前输入： export GOPROXY=https://goproxy.cn ","date":"2022-02-13","objectID":"/posts/3/:3:2","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#go"},{"categories":null,"content":" 4 修改引导程序安装引导程序 编辑/etc/default/grub 文件。 quiet splash nowatchdog modprobe.blacklist=nouveau nmi_watchdog=0 pcie_aspm=force barrier=0 Standard shortcuts sysrq_always_enabled=1 atime options noatime Watchdogs nowatchdog Flat Panel Table Invalid modprobe.blacklist=nouveau DRM kernel mode setting nvidia-drm.modeset=1 Turning barriers off barrier=0 vim /etc/default/grub 最后生成 GRUB 所需的配置文件 grub-mkconfig -o /boot/grub/grub.cfg ","date":"2022-02-13","objectID":"/posts/3/:4:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#修改引导程序"},{"categories":null,"content":" 5 提升makepkg编译速度参考链接：Archlinux 提升 makepkg 速度 ","date":"2022-02-13","objectID":"/posts/3/:5:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#提升makepkg编译速度"},{"categories":null,"content":" 5.1 并行编译编辑/etc/makepkg.conf中MAKEFLAGS， 默认值为MAKEFLAGS=\"-J2\"根据电脑CPU核心数(或线程数)进行修改。 ","date":"2022-02-13","objectID":"/posts/3/:5:1","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#并行编译"},{"categories":null,"content":" 5.2 多线程压缩 #install pigz pbzip2 paru -S pigz pbzip2 #edit /etc/makepkg.conf COMPRESSXZ=(xz -c -z - --threads=0) COMPRESSGZ=(pigz -c -f -n) COMPRESSBZ2=(pbzip2 -c -f) COMPRESSZST=(zstd -c -z -q - --threads=0) ","date":"2022-02-13","objectID":"/posts/3/:5:2","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#多线程压缩"},{"categories":null,"content":" 6 去除Vscode窗口标题栏参考链接：Archlinux 常用软件安装——VsCode 在设置中搜索Title Bar Style，修改为custom。 ","date":"2022-02-13","objectID":"/posts/3/:6:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#去除vscode窗口标题栏"},{"categories":null,"content":" 7 常用软件 #Feature packed AUR helper sudo pacman -S paru #paru使用技巧 1.使用选项-S使用paru从AUR安装软件包 paru -S package 2.使用paru删除包 paru -Rs package 3.使用yay清除不需要的依赖项 paru -Yc #字体 #weather-icons解决polybar的天气控件图标问题 sudo pacman -S noto-fonts noto-fonts-cjk ttf-sarasa-gothic ttf-font-awesome ttf-twemoji ttf-weather-icons ","date":"2022-02-13","objectID":"/posts/3/:7:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#常用软件"},{"categories":null,"content":" 7.1 Trash-cliTrash-cli中文非官方教程 #比rm -rf保险的删除文件夹，删除文件到回收站里 sudo pacman -S trash-cli trash-put： 删除文件和目录（仅放入回收站中） trash-list ：列出被删除了的文件和目录 trash-restore：从回收站中恢复文件或目录 trash. trash-rm：删除回收站中的文件 trash-empty：清空回收站 ","date":"2022-02-13","objectID":"/posts/3/:7:1","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#trash-cli"},{"categories":null,"content":" 7.2 SpacemacsSPacemacs官网 在Spacemacs中打开教程（按住CONTROL键再按h键后松开CONTROL键再按t键会进入中文教程） ctrl + h + t 用于切换vim和emacs的模式（可视化的标识是左下角的蓝标（Emacs）和黄标（Vim）） ctrl + z C-表示当按字符时按住CONTROL键。因此c-f就表示：按住CONTROL键再按f。 M-表示当按字符时按住META（或EDIT或ALT）键。如果键盘上没有META、EDIT或ALT键，用下述方法等效：先按一下ESC键然后松开，再按。用来表示ESC键。 退出Emacs C-x C-c （两个连续的组合键） 退出一个正在运行中的命令 C-g 向前移动一屏 C-v 向后移动一屏 M(EDIT or ALT)-v 重绘屏幕，并将光标所在行置于屏幕的中央 #CONTROL-L C-l 找到光标，留意其附近的文字，然后按C-l。此时会发现其光标附近的文字与之前相同，位置却变为屏幕的中心。如果再次按C-l，附近的文字将移动到屏幕的顶端。再次按住C-l，文字将移动到低端 PageUp和PageDn在emacs和vim下都可以使用 上下左右四个方向移动 #上一行——previous(上一行) C-p #下一行——next(下一行) C-n #向左移——backward(回退) C-b #向右移——forward(前进) C-f 常用命令 #移动到该词末尾(词：英文以英文单词为准，中文以下一个标点符号为准) #如果光标处于词与词的空白处，M-f会移动到下一个词的末尾 M-f #和M-f一样，方向相反 M-b #向右移动一个字符 C-f #向左移动一个字符 C-b #向右移动一个词【对中文是移动到下一个标点符号】 M-f #向左移动一个词【对中文是移动到上一个标点符号】 M-b #移动到下一行 C-n #移动到上一行 C-p #移动到行首 C-a #移动到行尾 C-e #移动到(每句)句首 M-a #移动到(每句)句尾 M-e #移动到所有文字的最开头(需要辅以shift) #M==Alt or EDIT M-\u003c #移动到所有文字的最末尾(需要辅以shift) #M==Alt or EDIT M-\u003e 命令参数 #C-u数字参数，为一个命令指定数字参数 #数字参数(前缀参数)：这个参数是先于使用它的命令而输入的 #先输入C-u，然后输入数字作为参数，最后再输入命令(推荐) #另一种方式，按住META(或EDIT或ALAT)键，然后输入数字 C-u + 数字 + 命令 终止命令 #安全地终止这条命令 #终止一条执行过久的命令 #取消数字参数和只输入到一半的命令 C-g #取消\u003cESC\u003e，再连按两次\u003cESC\u003e 被禁用的命令(DISABLED COMMANDS) #在用到了Emacs被禁用的命令，Emacs会显示提示信息，告知此命令的用处 #“n” -\u003e 拒绝使用 窗格(WINDOWS) #只保留一个窗格(关掉其它所有窗格) #保留光标所在的窗格，将其扩大到整个屏幕，同时关掉所有其它窗格 C-x 1 插入与删除(INSERTING AND DELETING) #删除光标前的一个字符 \u003cDEL\u003e #删除光标后的一个字符 c-d #移除光标前的一个词 M-\u003cDEL\u003e #移除光标后的一个词 M-d #移除从光标到“行尾”间的字符 C-k #移除从光标到“句尾”间的字符 M-k 撤销(UNDO) ","date":"2022-02-13","objectID":"/posts/3/:7:2","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#spacemacs"},{"categories":null,"content":" 7.3 N卡安装参考链接 打开ctrl+f搜索nvidia就能找到 注：以下均在root模式下进行(用户模式下也得获取管理员权限) 安装最新版的nvidia驱动后，先禁用窗口登陆器的自启动，打开/etc/X11/xorg.conf，注释以下内容 #Section \"Device\" # Identifier \"Device0\" # Driver \"nvidia\" # VendorName \"NVIDIA Corporation\" # BusID \"PCI:1:0:0\" #EndSection 在grub下的linux启动选项中添加modprobe.blacklist=nouveau，完成后，grub-mkconfig -o /boot/grub/grub.cfg刷新下。 之后，生成一个默认的nvidia xorg配置文件， nvidia-xconfig --prime 运行成功，文件将生成在/etgc/X11目录下xorg.conf文件 编辑xorg.conf文件，实现 offload 功能（就是混合模式）。 [更多窗口管理器，参考链接] NVIDIA_Optimus 将以下内容复制粘贴进去(或者修改原文件的内容，与下方一致) 注：BusID可以不用修改 Section \"ServerLayout\" Identifier \"layout\" Screen 0 \"iGPU\" Option \"AllowNVIDIAGPUScreens\" EndSection Section \"Device\" Identifier \"iGPU\" Driver \"modesetting\" BusID \"PCI:0:2:0\" EndSection Section \"Screen\" Identifier \"iGPU\" Device \"iGPU\" EndSection Section \"Device\" Identifier \"nvidia\" Driver \"nvidia\" BusID \"PCI:1:0:0\" EndSection ","date":"2022-02-13","objectID":"/posts/3/:7:3","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#n卡安装"},{"categories":null,"content":" 7.4 clash for windows tun 模式一 编辑 /etc/sysctl.conf 文件，填入以下内容 # Linux kernel forward net.ipv4.ip_forward=1 # https://github.com/Dreamacro/clash/issues/2146#issuecomment-1133890681 net.ipv4.conf.utun.rp_filter = 0 二 # 需要 nftables iproute2 paru -Sy clash-for-windows-electron-bin clash-premium-tun 注意：留意安装信息的绿字。 参考链接： [疑问]dns中fallback的作用 ","date":"2022-02-13","objectID":"/posts/3/:7:4","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#clash-for-windows-tun-模式"},{"categories":null,"content":" 7.5 docker配置v2rayav2raya_wiki WARNING: IPv4 forwarding is disabled. Networking will not work. 参考：Docker与Linux ip_forward数据包转发 v2raya 中的 ip 转发 也可开启此选项 解决方法： # 检查宿主机的ip_forward cat /proc/sys/net/ipv4/ip_forward # 编辑或修改/etc/sysctl.conf net.ipv4.ip_forward=1 # 查看当前的ip_forward sudo sysctl -p # 重启NetworkManager和docker服务 sudo systemctl restart NetworkManager sudo systemctl restart docker # run v2raya docker run -d \\ --restart=always \\ --privileged \\ --network=host \\ --name v2raya \\ -v /lib/modules:/lib/modules:ro \\ -v /etc/v2raya:/etc/v2raya \\ mzz2017/v2raya 个人配置： 透明代理：与大陆白名单一致 IP转发和端口分享：关闭 规则端口分流模式：RountingA # 废弃 hp() { export https_proxy=http://127.0.0.1:20171 export http_proxy=http://127.0.0.1:20171 export all_proxy=http://127.0.0.1:20171 echo \"https_proxy\"=$https_proxy echo \"http_proxy\"=$http_proxy echo \"all_proxy\"=$all_proxy } np() { unset https_proxy unset http_proxy unset all_proxy echo \"https_proxy\" echo \"http_proxy\" echo \"all_proxy\" } ","date":"2022-02-13","objectID":"/posts/3/:7:5","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#docker配置v2raya"},{"categories":null,"content":" 7.6 clash自动更新订阅参考链接： Clash自动更新订阅配置 clash-arch自启更新订阅 7.6.1 安装 sudo pacman -S clash 7.6.2 配置通过systemctl管理Clash的进程，对应clash@.service文件。 通过两个脚本start-clash.sh和stop-clash.sh实现开启更新订阅。 这里的%i指当前用户。 clash@.service # edit and save this file to /usr/lib/systemd/system/clash@.service [Unit] Description=A rule based proxy in Go for %i. Wants=network-online.target After=network-online.target [Service] WorkingDirectory=/home/%i/.config/clash Type=simple User=%i Restart=on-abort ExecStart=/home/%i/.config/clash/start-clash.sh ExecStop=/home/%i/.config/clash/stop-clash.sh [Install] WantedBy=multi-user.target start-clash.sh #!/bin/bash #保存PID文件 echo $$ \u003e ${HOME}/.config/clash/clash.pid # 订阅链接下载地址 CLASH_URL=\"你的订阅链接\" # 对比新的文件和旧的文件有什么不同 diff ${HOME}/.config/clash/config.yaml \u003c(curl -s ${CLASH_URL}) #如果两个文件一致，就直接开启clash，如果不一致就覆盖原文件 if [ \"$?\" == 0 ] then /usr/bin/clash else curl -L -o ${HOME}/.config/clash/config.yaml ${CLASH_URL} /usr/bin/clash fi stop-clash.sh 注意： rm命令也可以删除，作者使用的是trash-put进行删除。 #!/bin/bash PID=`cat ${HOME}/.config/clash/clash.pid` kill -9 ${PID} trash-put ${HOME}/.config/clash/clash.pid 写好后，给start-clash.sh和stop-clash.sh赋予执行权限 chmod +x stop-clash.sh start-clash.sh 使用systemctl管理 sudo systemctl enable --now clash@%i ","date":"2022-02-13","objectID":"/posts/3/:7:6","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#clash自动更新订阅"},{"categories":null,"content":" 7.6 clash自动更新订阅参考链接： Clash自动更新订阅配置 clash-arch自启更新订阅 7.6.1 安装 sudo pacman -S clash 7.6.2 配置通过systemctl管理Clash的进程，对应clash@.service文件。 通过两个脚本start-clash.sh和stop-clash.sh实现开启更新订阅。 这里的%i指当前用户。 clash@.service # edit and save this file to /usr/lib/systemd/system/clash@.service [Unit] Description=A rule based proxy in Go for %i. Wants=network-online.target After=network-online.target [Service] WorkingDirectory=/home/%i/.config/clash Type=simple User=%i Restart=on-abort ExecStart=/home/%i/.config/clash/start-clash.sh ExecStop=/home/%i/.config/clash/stop-clash.sh [Install] WantedBy=multi-user.target start-clash.sh #!/bin/bash #保存PID文件 echo $$ \u003e ${HOME}/.config/clash/clash.pid # 订阅链接下载地址 CLASH_URL=\"你的订阅链接\" # 对比新的文件和旧的文件有什么不同 diff ${HOME}/.config/clash/config.yaml \u003c(curl -s ${CLASH_URL}) #如果两个文件一致，就直接开启clash，如果不一致就覆盖原文件 if [ \"$?\" == 0 ] then /usr/bin/clash else curl -L -o ${HOME}/.config/clash/config.yaml ${CLASH_URL} /usr/bin/clash fi stop-clash.sh 注意： rm命令也可以删除，作者使用的是trash-put进行删除。 #!/bin/bash PID=`cat ${HOME}/.config/clash/clash.pid` kill -9 ${PID} trash-put ${HOME}/.config/clash/clash.pid 写好后，给start-clash.sh和stop-clash.sh赋予执行权限 chmod +x stop-clash.sh start-clash.sh 使用systemctl管理 sudo systemctl enable --now clash@%i ","date":"2022-02-13","objectID":"/posts/3/:7:6","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#安装"},{"categories":null,"content":" 7.6 clash自动更新订阅参考链接： Clash自动更新订阅配置 clash-arch自启更新订阅 7.6.1 安装 sudo pacman -S clash 7.6.2 配置通过systemctl管理Clash的进程，对应clash@.service文件。 通过两个脚本start-clash.sh和stop-clash.sh实现开启更新订阅。 这里的%i指当前用户。 clash@.service # edit and save this file to /usr/lib/systemd/system/clash@.service [Unit] Description=A rule based proxy in Go for %i. Wants=network-online.target After=network-online.target [Service] WorkingDirectory=/home/%i/.config/clash Type=simple User=%i Restart=on-abort ExecStart=/home/%i/.config/clash/start-clash.sh ExecStop=/home/%i/.config/clash/stop-clash.sh [Install] WantedBy=multi-user.target start-clash.sh #!/bin/bash #保存PID文件 echo $$ \u003e ${HOME}/.config/clash/clash.pid # 订阅链接下载地址 CLASH_URL=\"你的订阅链接\" # 对比新的文件和旧的文件有什么不同 diff ${HOME}/.config/clash/config.yaml \u003c(curl -s ${CLASH_URL}) #如果两个文件一致，就直接开启clash，如果不一致就覆盖原文件 if [ \"$?\" == 0 ] then /usr/bin/clash else curl -L -o ${HOME}/.config/clash/config.yaml ${CLASH_URL} /usr/bin/clash fi stop-clash.sh 注意： rm命令也可以删除，作者使用的是trash-put进行删除。 #!/bin/bash PID=`cat ${HOME}/.config/clash/clash.pid` kill -9 ${PID} trash-put ${HOME}/.config/clash/clash.pid 写好后，给start-clash.sh和stop-clash.sh赋予执行权限 chmod +x stop-clash.sh start-clash.sh 使用systemctl管理 sudo systemctl enable --now clash@%i ","date":"2022-02-13","objectID":"/posts/3/:7:6","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#配置"},{"categories":null,"content":" 7.7 i3lock-color 参考链接： i3lock各个衍生介绍 美化链接 加入系统服务 美化配置文件 #!/bin/sh # Terminate already running bar instances killall -q i3lock # Wait until the processes have been shut down while pgrep -u $UID -x i3lock \u003e/dev/null; do sleep 1; done BLANK='#EAEAEF' CLEAR='#1e90ff' DEFAULT='#1e90ff' TEXT='#483d8b' WRONG='#ffa500' VERIFYING='#B5E6B5' i3lock \\ --insidever-color=$CLEAR \\ --ringver-color=$VERIFYING \\ \\ --insidewrong-color=$CLEAR \\ --ringwrong-color=$WRONG \\ \\ --inside-color=$BLANK \\ --ring-color=$DEFAULT \\ --line-color=$BLANK \\ --separator-color=$DEFAULT \\ \\ --verif-color=$TEXT \\ --wrong-color=$TEXT \\ --time-color=$TEXT \\ --date-color=$TEXT \\ --layout-color=$TEXT \\ --keyhl-color=$WRONG \\ --bshl-color=$WRONG \\ \\ --screen 1 \\ --blur 5 \\ --clock \\ --indicator \\ --time-str=\"%H:%M:%S\" \\ --date-str=\"%A, %m %Y\" \\ --keylayout 1 \\ 加入系统服务，休眠开启后锁屏 # edit and save this file to /usr/lib/systemd/system/lock@.service [Unit] Description=Lock screen on suspend for %i Before=sleep.target suspend.target hibernate.target hybrid-sleep.target [Service] User=%i Environment=DISPLAY=:0 Type=forking ExecStartPre= -/usr/bin/pkill -u %u unison ExecStart=/home/%i/文件路径 ExecStartPost=/usr/bin/sleep 1 [Install] WantedBy=sleep.target suspend.target hibernate.target hybrid-sleep.target 自启动 sudo systemctl enable lock@%i ","date":"2022-02-13","objectID":"/posts/3/:7:7","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#i3lock-color"},{"categories":null,"content":" 7.8 obs-studio在arch kde下录制麦克风音频的时候，出现了即使上噪声抑制依旧无法屏蔽笔记本本身的噪音，这里给出解决办法以及来源 来源：Linux 系統降噪 #编辑文件 sudo nano /etc/pulse/default.pa #将下行加入到“Echo Cancellation”的地方 load-module module-echo-cancel #重启PulseAudio (pulseaudio -k)就解决了 如果遇到在obs运行状态下，修改的以上配置文件，还需重启obs即可。 ","date":"2022-02-13","objectID":"/posts/3/:7:8","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#obs-studio"},{"categories":null,"content":" 7.9 Blob Emoji参考链接：在 Linux 下使用 Blob Emoji noto-fonts-emoji-blob 在~/.config/fontconfig/70-emojione-color.conf下写入 \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003c!DOCTYPE fontconfig SYSTEM \"fonts.dtd\"\u003e \u003cfontconfig\u003e \u003cmatch\u003e \u003ctest name=\"family\"\u003e\u003cstring\u003esans-serif\u003c/string\u003e\u003c/test\u003e \u003cedit name=\"family\" mode=\"prepend\" binding=\"strong\"\u003e \u003cstring\u003eBlobmoji\u003c/string\u003e \u003c/edit\u003e \u003c/match\u003e \u003cmatch\u003e \u003ctest name=\"family\"\u003e\u003cstring\u003eserif\u003c/string\u003e\u003c/test\u003e \u003cedit name=\"family\" mode=\"prepend\" binding=\"strong\"\u003e \u003cstring\u003eBlobmoji\u003c/string\u003e \u003c/edit\u003e \u003c/match\u003e \u003cmatch\u003e \u003ctest name=\"family\"\u003e\u003cstring\u003emonospace\u003c/string\u003e\u003c/test\u003e \u003cedit name=\"family\" mode=\"prepend\" binding=\"strong\"\u003e \u003cstring\u003eBlobmoji\u003c/string\u003e \u003c/edit\u003e \u003c/match\u003e \u003cmatch\u003e \u003ctest name=\"family\"\u003e\u003cstring\u003eApple Color Emoji\u003c/string\u003e\u003c/test\u003e \u003cedit name=\"family\" mode=\"prepend\" binding=\"strong\"\u003e \u003cstring\u003eBlobmoji\u003c/string\u003e \u003c/edit\u003e \u003c/match\u003e \u003c/fontconfig\u003e 刷新字体缓存 fc-cache -f -v ","date":"2022-02-13","objectID":"/posts/3/:7:9","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#blob-emoji"},{"categories":null,"content":" 7.10 zsharch-zsh-wiki # 查看当前使用的shell echo $SHELL # 查看安装了哪些 Shell chsh -l # 修改当前账户的默认 Shell chsh -s /usr/bin/zsh zimfw 安装 zimfw。 curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh 编辑 zsh 配置文件 ~/.zimrc。 vim ~/.zimrc 添加 dracula 模块。 dracula-zsh zmodule dracula/zsh -n dracula 安装 dracula 模块。 ps: 此处需要代理。 zimfw install ","date":"2022-02-13","objectID":"/posts/3/:7:10","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#zsh"},{"categories":null,"content":" 8 ArchLinux-Tips journalctl -p 4 -b -b选项可以筛选出本次boot直到当前的记录 -p选项可以筛选出严重等级高于某一值的记录 “emerg” (0), “alert” (1), “crit” (2), “err” (3), “warning” (4), “notice” (5), “info” (6), “debug” (7) pgrep -l 进程名字(\"进程名字\") sudo journalctl --disk-usage #查看日志大小 sudo journalctl --vacuum-time=5d #超过5天的自动删除 sudo journalctl --vacuum-size=500M #超过500M的自动删除 ","date":"2022-02-13","objectID":"/posts/3/:8:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#archlinux-tips"},{"categories":null,"content":" 9 SSD配置如果安装在SSD上，可以选择以下命令 sudo systemctl enable --now fstrim.timer ","date":"2022-02-13","objectID":"/posts/3/:9:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#ssd配置"},{"categories":null,"content":" 10 i3-networkmanager-dmenu-git-connection-802.1x nmcli connection add type wifi con-name NAME ifname wlan0 ssid SSID -- wifi-sec.key-mgmt wpa-eap 802-1x.eap ttls 802-1x.phase2-auth mschapv2 802-1x.identity USERNAME 其中，NAME是自定义，SSID是链接的名称，USERNAME是用户名。 其余不变。 第一次登录需要额外使用--ask参数 nmcli --ask connection up NAME ","date":"2022-02-13","objectID":"/posts/3/:10:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#i3-networkmanager-dmenu-git-connection-8021x"},{"categories":null,"content":" 11 触控板安装 xf86-input-libinput 包，然后在 /etc/X11/xorg.conf.d 里配置 20-touchpad.conf ，写入以下内容： Section \"InputClass\" Identifier \"libinput touchpad catchall\" MatchIsTouchpad \"on\" MatchDevicePath \"/dev/input/event*\" Driver \"libinput\" Option \"NaturalScrolling\" \"on\" Option \"Tapping\" \"on\" Option \"DisableWhileTyping\" \"on\" EndSection 参考链接：笔记本 ArchLinux 的一些折腾 ","date":"2022-02-13","objectID":"/posts/3/:11:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#触控板"},{"categories":null,"content":" 12 Linux Windows 双系统时间不一致修改 Windows 硬件时钟为 UTC 时间 以管理员身份打开 「PowerShell」，输入以下命令： Reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1 或者打开「注册表编辑器」，定位到 计算机\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation 目录下，新建一个 DWORD 类型，名称为 RealTimeIsUniversal 的键，并修改键值为 1 即可。 参考链接 Linux Windows 双系统时间不一致 ","date":"2022-02-13","objectID":"/posts/3/:12:0","series":null,"tags":["linux"],"title":"archLinux i3 配置","uri":"/posts/3/#linux-windows-双系统时间不一致"},{"categories":null,"content":" 一定要坚持，要保持长时间学习，甚至终生学习的态度。 一定要动手，不管例子多么简单，建议至少自己动手敲一遍看看是否理解了里头的细枝末节。 一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。 不要乱买书，不要乱追求新技术新名词，基础的东西经过很长时间积累，会在未来至少10年通用。 回顾一下历史，看看历史时间线上技术的发展，你才能明白明天会是什么样的。 有时间看书，就先不要看专栏；有时间看专栏，就先不要看各种博客；有条件看官方文档，就先不要看速度教程。 人生一世，选条路，不退让，不更改，一直走到尽头，是件幸事。「庆余年」 所谓的黑色电影并不是一种类型，它不像西部片和犯罪片那样由环境和冲突来界定，而是由更微妙的调子和情绪特点来界定。「保罗·施耐德《黑色电影札记》」 不结同心人，空结同心草。「［唐］薛涛《春望词四首》其三」 ","date":"2022-02-13","objectID":"/posts/2/:0:0","series":null,"tags":["tattle"],"title":"摘录","uri":"/posts/2/#"},{"categories":null,"content":"这是网站的第一篇文章，历时半个多月，参阅了很多大佬的文章，感谢各位大佬的分享的优质资源。 链接汇总： 雨临Lewis 就是这个范儿 公子 Hugo部署到Github Ahrisy の 碎碎念 回忆中的明天 南岩666のBlog 少数派 Shuzang’s Blog 小林书架 风月 hugo博客添加评论系统Valine 为什么你没授权就能用大大的作品？？—“知识共享”（CC协议）简单介绍 creativecommons许可协议 友链添加 至此，本站终于建站成功！ 关于首页头像点击后会跳转到Posts下，办法是： 将themes/LoveIt/layouts/partials/home/目录下的profile.html复制到根目录[指：网站根目录]下的对应位置，将文件中的 \u003ca href=\"{{ $url }}\"{{ with .Title | default .Name }} title=\"{{ . }}\"{{ end }}{{ if (urls.Parse $url).Host }} rel=\"noopener noreffer\" target=\"_blank\"{{ end }}\u003e {{- dict \"Src\" $avatar | partial \"plugin/image.html\" -}} \u003c/a\u003e 中的代码修改为 \u003ca {{ if (urls.Parse $url).Host }} rel=\"noopener noreffer\" target=\"_blank\"{{ end }}\u003e {{- dict \"Src\" $avatar | partial \"plugin/image.html\" -}} \u003c/a\u003e 之后鼠标再滑动到这时，就不会变成手掌点击模样了。 ","date":"2022-02-13","objectID":"/posts/1/:0:0","series":null,"tags":["tattle"],"title":"建站","uri":"/posts/1/#"}]