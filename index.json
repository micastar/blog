[{"categories":null,"content":" How to edit emulator flags in Android Studio DRI3 issues 安卓模拟器的硬件加速在 DRI3 上不能正常使用，需要禁用DRI3 使用 adb 和观察 android studio 的运行日志，看不出任何问题，只有错误 X Error of failed request: GLXBadContext Major opcode of failed request: 155 (GLX) Minor opcode of failed request: 6 (X_GLXIsDirect) Serial number of failed request: 49 Current serial number in output stream: 48 感谢 Mike 博主的提示，通过使用 LIBGL_DEBUG=verbose 才观察到是由于 DRI3 的问题 ","date":"2023-05-23","objectID":"/posts/android-error-on-arch/:0:0","series":null,"tags":["android"],"title":"android error on arch","uri":"/posts/android-error-on-arch/#"},{"categories":null,"content":" 参考链接 git-docs Git学习笔记 Become a git guru. git-stash ","date":"2022-07-19","objectID":"/posts/git-study/:0:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#"},{"categories":null,"content":" 1 branch 参考链接 How to Delete a Git Branch Both Locally and Remotely 在偶尔的情况下，可能会想要保留那些与你的代码没有共同祖先的分支。例如在这些分支上保留生成的文档或者其他一些东西。 如果需要创建一个不使用当前代码库作为父提交的分支，可以用如下的方法创建一个空分支。 ","date":"2022-07-19","objectID":"/posts/git-study/:1:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#branch"},{"categories":null,"content":" 1.1 方法1执行以下git命令： git symbolic-ref HEAD refs/heads/newbranch rm .git/index git clean -fdx \u003cdo work\u003e git add your files git commit -m 'Initial commit' ","date":"2022-07-19","objectID":"/posts/git-study/:1:1","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#方法1"},{"categories":null,"content":" 1.2 方法2这里以github的操作为例，下面试图创建一个名为gh-pages的空分支： $ cd repo $ git checkout --orphan gh-pages # 创建一个orphan的分支，这个分支是独立的 Switched to a new branch 'gh-pages' $ git rm -rf . # 删除原来代码树下的所有文件 rm ...... ","date":"2022-07-19","objectID":"/posts/git-study/:1:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#方法2"},{"categories":null,"content":" 1.3 添加内容并push注意这个时候用git branch命令是看不见当前分支的名字的，除非进行了第一次commit。 下面我们开始添加一些代码文件，例如这里新增了一个index.html: $ echo \\\"My GitHub Page\\\" \u003e index.html $ git add . $ git commit -a -m \\\"First pages commit\\\" $ git push origin gh-pages 在commit操作之后，你就可以用git branch命令看到新分支的名字了，然后push到远程仓库。 ","date":"2022-07-19","objectID":"/posts/git-study/:1:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#添加内容并push"},{"categories":null,"content":" 2 commit 参考链接 git 删除错误提交的commit git commit 合并 Delete Local Commits in Git 在commit之后修改注释 ","date":"2022-07-19","objectID":"/posts/git-study/:2:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#commit"},{"categories":null,"content":" 2.1 已经 push对于已经提交并已经 push 到远程仓库中的需要通过 git rebase 才能完成。 首先要 git rebase 到需要修改的那个 commit 的前1个 commit。假设 commit id 是 32e0a87f，运行下面的 git rebase 命令： git rebase -i 32e0a87f 在 git bash 中运行上面的命令后，会弹出编辑框，在编辑框中会分行依次显示以 pick 开头的这个 commit 之后的所有 commit message。 将需要修改的commit message之前的\"pick\"改为\"reword\"，点击保存按钮，并关闭编辑框，这时会执行rebase操作。 Rebasing (1/3) 接着会再次弹出编辑框，这次编辑框中只有之前改为\"reword\"的那个commit message，此时修改commit message的内容，点击保存按钮并关闭编辑框，会继续执行rebase操作。 如果操作成功，会出现如下的提示： [detached HEAD aa3b52c] Add return url 2 files changed, 1 insertion(+), 3 deletions(-) Successfully rebased and updated refs/heads/oss. 这样就完成了git commit message的修改，然后强制push一下就搞定了。 git push --force ","date":"2022-07-19","objectID":"/posts/git-study/:2:1","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#已经-push"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao \u003caoxiaojian@gmail.com\u003e Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao \u003caoxiaojian@gmail.com\u003e Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao \u003caoxiaojian@gmail.com\u003e Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao \u003caoxiaojian@gmail.com\u003e Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD \u003csha1-commit-hash\u003e HEAD^ 上一次 \u003ccommit_id\u003e 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/git-study/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#撤销-commit"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/git-study/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#背景"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/git-study/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#操作"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/git-study/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#找出提交历史记录"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/git-study/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#执行-reset-命令"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/git-study/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#执行强制的-push-命令"},{"categories":null,"content":" 2.2 撤销 commit在commit之后撤销已经提交的commit 2.2.0.1 背景 代码修改后已经执行了commit和push 希望撤销这次commit，回到到这个commit之前的状态：包括本地和远程仓库 2.2.0.2 操作 2.2.0.2.1 找出提交历史记录先 git log 找出提交的历史记录 比如下面有四个commit记录： $ git log commit 87dabb290ae1a4e620512b7cd81d2161747c6ec9 Author: Sky Ao Date: Thu Jul 21 16:36:26 2016 +0800 add cliet builder and wrap native api; setup integration test; add first unit test case and integration test case commit 6899dd19dbe58da6ae65fd157a791151967c16b2 Author: Sky Ao Date: Thu Jul 21 15:17:00 2016 +0800 rollback package name to etcdserverpb, otherwise etcd server will reject the request commit 18d034b3a1e20e81ece3d2f6ba9919e8bdb3dfd4 Author: Sky Ao Date: Thu Jul 21 14:37:19 2016 +0800 change java version to 1.7 commit 4beef3ce6557a41e657c2ee4e19c6156eabd759b Author: Sky Ao Date: Wed Jul 20 18:40:18 2016 +0800 现在需要撤销最新的这一次 87dabb290ae1a4e620512b7cd81d2161747c6ec9 提交， 回退到它的上一次 6899dd19dbe58da6ae65fd157a791151967c16b2。 2.2.0.2.2 执行 reset 命令 git reset --hard 6899dd19dbe58da6ae65fd157a791151967c16b2 HEAD 现在位于 6899dd1 rollback package name to etcdserverpb, otherwise etcd server will reject the request 注意 commitid 是要撤销的commit的前一次commit的id，也就是说 reset 命令是将提交 重置 到要撤销的前一次。 reset命令执行完成后，本地仓库就重置，相当于撤销了 6899dd1 之前的所有commit。 其他 : 根据–mixed –soft –hard，会对 working tree 和 index 和 HEAD 进行重置: git reset –mixed：此为默认方式，不带任何参数的git reset，即这种方式，它回退到某个版本，只保留源码，回退 commit 和 index 信息 git reset –soft：回退到某个版本，只回退了 commit 的信息，不会恢复到 index file 一级。如果还要提交，直接 commit 即可 git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容 HEAD HEAD^ 上一次 每次commit的SHA1值. 可以用 git log 看到,也可以在页面上 commit 标签页里找到. 2.2.0.2.3 执行强制的 push 命令执行 push 命令，注意是需要增加 –force 来强制推送： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) To git@github.com:skyao/jetcd.git + 87dabb2...6899dd1 HEAD -\u003e master (forced update) push 命令执行完成，远程仓库也就重置了。此时从远程仓库上看，在这次 6899dd19dbe58da6ae65fd157a791151967c16b2 提交之后的所有commit已经消失，相当于 git 仓库回滚到这个提交了。 如果不是master branch，则需要在HEAD后面指定远程分支的名字，如： git push origin HEAD:learning --force 2.2.0.2.4 处理受保护分支如果当前分支是 protecded 的受保护分支，则 git 服务器会拒绝强制推送，报错如下： $ git push origin HEAD --force Total 0 (delta 0), reused 0 (delta 0) remote: GitLab: You are not allowed to force push code to a protected branch on this project. To basiccloud.net:foundation/foundation-etcd.git ! [remote rejected] HEAD -\u003e master (pre-receive hook declined) error: 无法推送一些引用到 'git@basiccloud.net:foundation/foundation-etcd.git' 此时，需要将当前分支的 Protected 属性暂时去掉。 对于 gitlab，可以进入当前仓库的设置中的 “Protected branches” 一项，将当前 branch 的 protected 临时去掉，等这次 push 完成，再重新设置回 protected 。 ","date":"2022-07-19","objectID":"/posts/git-study/:2:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#处理受保护分支"},{"categories":null,"content":" 2.3 合并 commit有时 commit 太多，而且可能一个 commit 只是提交一个小 bug ，那么合并 commit 势在必行。 2.3.1 第一种提交最后一个修改的 commit 使用参数，之前的一个 commit 将会合并到这个即将提交的 commit 中来 : git commit -a --amend -m \"my message here\"如果之前有一个提交，并且信息为: git commit -a -m \"my last commit message\" 则这个 commit message 将不存在。但该commit的信息已经合并到\"my message here\"中了。 2.3.2 第二种如果提交了最后的修改 : $ git reset --soft HEAD^ #或HEAD^意为取消最后commit $ git commit --amend 把最后一个 commit 合并到前一个提交中去，例如（由上往下读）： git add b.text git commit -a -m \"my message here\" git add a.text git commit -a -m \"my last commit message\" 最后存在的将是\"my last commit message\"。也可后退 n 个，合并到前面第 n+1 个 commit 中去： $ git reset --soft HEAD~n #后退到第n，我也不清楚具体含义。 $ git commit --amend [-m \"new message\"] 最方便的是调用 reflog 查看操作历史，找到具体的 commit id ，然后直接 git reset –hard [commit_id] 就回到你要的版本！ ","date":"2022-07-19","objectID":"/posts/git-study/:2:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#合并-commit"},{"categories":null,"content":" 2.3 合并 commit有时 commit 太多，而且可能一个 commit 只是提交一个小 bug ，那么合并 commit 势在必行。 2.3.1 第一种提交最后一个修改的 commit 使用参数，之前的一个 commit 将会合并到这个即将提交的 commit 中来 : git commit -a --amend -m \"my message here\"如果之前有一个提交，并且信息为: git commit -a -m \"my last commit message\" 则这个 commit message 将不存在。但该commit的信息已经合并到\"my message here\"中了。 2.3.2 第二种如果提交了最后的修改 : $ git reset --soft HEAD^ #或HEAD^意为取消最后commit $ git commit --amend 把最后一个 commit 合并到前一个提交中去，例如（由上往下读）： git add b.text git commit -a -m \"my message here\" git add a.text git commit -a -m \"my last commit message\" 最后存在的将是\"my last commit message\"。也可后退 n 个，合并到前面第 n+1 个 commit 中去： $ git reset --soft HEAD~n #后退到第n，我也不清楚具体含义。 $ git commit --amend [-m \"new message\"] 最方便的是调用 reflog 查看操作历史，找到具体的 commit id ，然后直接 git reset –hard [commit_id] 就回到你要的版本！ ","date":"2022-07-19","objectID":"/posts/git-study/:2:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#第一种"},{"categories":null,"content":" 2.3 合并 commit有时 commit 太多，而且可能一个 commit 只是提交一个小 bug ，那么合并 commit 势在必行。 2.3.1 第一种提交最后一个修改的 commit 使用参数，之前的一个 commit 将会合并到这个即将提交的 commit 中来 : git commit -a --amend -m \"my message here\"如果之前有一个提交，并且信息为: git commit -a -m \"my last commit message\" 则这个 commit message 将不存在。但该commit的信息已经合并到\"my message here\"中了。 2.3.2 第二种如果提交了最后的修改 : $ git reset --soft HEAD^ #或HEAD^意为取消最后commit $ git commit --amend 把最后一个 commit 合并到前一个提交中去，例如（由上往下读）： git add b.text git commit -a -m \"my message here\" git add a.text git commit -a -m \"my last commit message\" 最后存在的将是\"my last commit message\"。也可后退 n 个，合并到前面第 n+1 个 commit 中去： $ git reset --soft HEAD~n #后退到第n，我也不清楚具体含义。 $ git commit --amend [-m \"new message\"] 最方便的是调用 reflog 查看操作历史，找到具体的 commit id ，然后直接 git reset –hard [commit_id] 就回到你要的版本！ ","date":"2022-07-19","objectID":"/posts/git-study/:2:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#第二种"},{"categories":null,"content":" 3 merge更新github上fork的仓库 ","date":"2022-07-19","objectID":"/posts/git-study/:3:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#merge"},{"categories":null,"content":" 3.1 背景 在github上fork了某项目 原仓库有新的改动 想将原仓库的改动更新到自己fork的仓库 ","date":"2022-07-19","objectID":"/posts/git-study/:3:1","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#背景-1"},{"categories":null,"content":" 3.2 操作过程 3.2.1 同步代码以netty为例： 源地址：git@github.com:netty/netty.git 我fork的： git@github.com:skyao/netty.git 按照下面的步骤: 为本地仓库增加一个remote, 命名为\"upstream\": git remote add upstream git://github.com/dapr/dapr.git # 或者 git remote add upstream git@github.com:dapr/dapr.git 也有人推荐下面的多了–track参数的的方式: git remote add --track master upstream git://github.com/dapr/dapr.git fetch 这个upstream远程的所有分支到remote-tracking分支, 例如upstream/master git fetch upstream 确认当前分支是master分支, 如果不是checkout到master分支 git branch git checkout master 同步upstream的修改到本地, 可以选择rebase或者merge git rebase upstream/master git merge upstream/master 注: 推荐用merge. 将更新之后的版本推送到自己fork的仓库 git push -f origin master 3.2.2 同步tag git fetch upstream --tags git push --tags ","date":"2022-07-19","objectID":"/posts/git-study/:3:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#操作过程"},{"categories":null,"content":" 3.2 操作过程 3.2.1 同步代码以netty为例： 源地址：git@github.com:netty/netty.git 我fork的： git@github.com:skyao/netty.git 按照下面的步骤: 为本地仓库增加一个remote, 命名为\"upstream\": git remote add upstream git://github.com/dapr/dapr.git # 或者 git remote add upstream git@github.com:dapr/dapr.git 也有人推荐下面的多了–track参数的的方式: git remote add --track master upstream git://github.com/dapr/dapr.git fetch 这个upstream远程的所有分支到remote-tracking分支, 例如upstream/master git fetch upstream 确认当前分支是master分支, 如果不是checkout到master分支 git branch git checkout master 同步upstream的修改到本地, 可以选择rebase或者merge git rebase upstream/master git merge upstream/master 注: 推荐用merge. 将更新之后的版本推送到自己fork的仓库 git push -f origin master 3.2.2 同步tag git fetch upstream --tags git push --tags ","date":"2022-07-19","objectID":"/posts/git-study/:3:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#同步代码"},{"categories":null,"content":" 3.2 操作过程 3.2.1 同步代码以netty为例： 源地址：git@github.com:netty/netty.git 我fork的： git@github.com:skyao/netty.git 按照下面的步骤: 为本地仓库增加一个remote, 命名为\"upstream\": git remote add upstream git://github.com/dapr/dapr.git # 或者 git remote add upstream git@github.com:dapr/dapr.git 也有人推荐下面的多了–track参数的的方式: git remote add --track master upstream git://github.com/dapr/dapr.git fetch 这个upstream远程的所有分支到remote-tracking分支, 例如upstream/master git fetch upstream 确认当前分支是master分支, 如果不是checkout到master分支 git branch git checkout master 同步upstream的修改到本地, 可以选择rebase或者merge git rebase upstream/master git merge upstream/master 注: 推荐用merge. 将更新之后的版本推送到自己fork的仓库 git push -f origin master 3.2.2 同步tag git fetch upstream --tags git push --tags ","date":"2022-07-19","objectID":"/posts/git-study/:3:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#同步tag"},{"categories":null,"content":" 4 tag 参考链接 2.6 Git Basics - Tagging How to delete local and remote git tags (WITH EXAMPLES) Remove all git tags How To Delete Local and Remote Tags on Git 记录git中tag命令的用法。 ","date":"2022-07-19","objectID":"/posts/git-study/:4:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#tag"},{"categories":null,"content":" 4.1 列出已有 tag git tag git tag -l 'v1.4.2.*' ","date":"2022-07-19","objectID":"/posts/git-study/:4:1","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#列出已有-tag"},{"categories":null,"content":" 4.2 添加 tag添加轻量级标签： git tag -a v1.4 添加含附注类型的标签： git tag -a v1.4 -m 'my version 1.4' 推送到远程： git push origin v1.4 或者 –tags 推送全部： git push --tags ","date":"2022-07-19","objectID":"/posts/git-study/:4:2","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#添加-tag"},{"categories":null,"content":" 4.3 删除 tag删除本地 tag : git tag -d v1.0.0 删除远程指定 tag : $ git push origin --delete v2.5 To git@github.com:username/project.git - [deleted] v2.5 删除远程所有 tag : git ls-remote origin | cut -f 2 | grep -iv head | xargs git push --delete origin ","date":"2022-07-19","objectID":"/posts/git-study/:4:3","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#删除-tag"},{"categories":null,"content":" 5 remote 参考链接 Git Bash: remote error: You can’t push to git://github.com 通过set-url解决can’t push错误 如果clone时 remote 的地址信息有问题，比如通过 git clnoe git://github.com/skyao/learning-git.git 的方式 clone 下来的仓库，在改动之后push时，会报错，错误信息如下： git push fatal: 远程错误： You can't push to git://github.com/skyao/learning-git.git Use https://github.com/skyao/learning-git.git 事实上，在github 页面上，给出的clone地址是 git@github.com:skyao/learning-git.git git@github.com/skyao/learning-git.git 和前面clone下来时使用的地址仅有一个字符的差异。 解决问题的方法，可以重新用正确的地址再clone一遍。如果已经有commit，则可以使用 remote 的 set-url 子命令直接修改remote的地址： git remote set-url origin git@github.com:skyao/learning-git.git sky@B-47WAMD6R-0023 learning-git % git push Connection to github.com port 22 [tcp/ssh] succeeded! ","date":"2022-07-19","objectID":"/posts/git-study/:5:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#remote"},{"categories":null,"content":" 6 submodule 参考链接 Git-Tools-Submodules 下载 Project 并初始化 submodule。 # --depth=1 仅限 Project 深度，对于 submodule 无效。 git clone --recurse-submodules --depth=1 git@github.com:keunghin/blogdeploy.git 更新 submodule。 git submodule update --remote --merge ","date":"2022-07-19","objectID":"/posts/git-study/:6:0","series":null,"tags":["git"],"title":"git study","uri":"/posts/git-study/#submodule"},{"categories":null,"content":"http://www.gstatic.com/generate_204 http://cp.cloudflare.com/generate_204 http://www.qualcomm.cn/generate_204 http://clients3.google.com/generate_204 http://www.gstatic.com/generate_204 http://connectivitycheck.gstatic.com/generate_204 http://edge.microsoft.com/captiveportal/generate_204 http://cp.cloudflare.com/generate_204 http://www.qualcomm.cn/generate_204 http://connect.rom.miui.com/generate_204 http://connectivitycheck.platform.hicloud.com/generate_204 http://wifi.vivo.com.cn/generate_204 http://204.ustclug.org http://captive.apple.com/ http://www.msftconnecttest.com/connecttest.txt http://detectportal.firefox.com/success.txt 参考链接 generate_204 测速地址 收集几个地址，帮你确认是否连接到互联网 检测网络联通性\u0026generate_204服务汇总与评测 ","date":"2022-07-18","objectID":"/posts/test-address-for-transparent-tools/:0:0","series":null,"tags":["test_address"],"title":"test address","uri":"/posts/test-address-for-transparent-tools/#"},{"categories":null,"content":" 1 ArchLinux安装参考链接 ArchLinux Installation guide archlinux 简明指南 篝ノ雾枝的魔法学院 ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:1:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#archlinux安装参考链接"},{"categories":null,"content":" 2 获取镜像列表 此方法写在.zshrc里，用命令行快捷进行替代。 #注意：在--sort rate中，有些镜像无法进行评分，会在命令行下弹出警号（WARNING） sudo reflector --country China --age 6 --latest 6 --fastest 6 --threads 6 --sort rate --protocol http --save /etc/pacman.d/mirrorlist 镜像下好之后，删除tuna源(好几次下载失败，用的人太多了），用bfsu或opentuna等其他镜像源。 ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:2:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#获取镜像列表"},{"categories":null,"content":" 3 开发环境","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:3:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#开发环境"},{"categories":null,"content":" 3.1 Java Java Java-ArchWiki sudo pacman -S java-runtime-common java-environment-common sudo pacman -S jdk8 #选择 extra/jdk8-openjdk/extra/jdk11-openjdk 使用 archlinux-java 命令来管理 Java 环境 列举 Java 环境： archlinux-java status 选择 Java 环境： sudo archlinux-java set java-8-openjdk ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:3:1","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#java"},{"categories":null,"content":" 3.2 Go Go Go-ArchWiki sudo pacman -S go go-tools 第二种方法是 gcc-go。 若开发环境中用到 JetBrains 的 IDE 则必须使用go ，否则 IDE 无法在 /usr/lib/go 下找到 Go SDK。 原文：If you are using a Jetbrains IDE and the Go plugin cannot find your Go SDK path, you might be using an incompatible package. Remove the gcc-go package and replace it with go. If your $GOPATH is set, the IDE should now be able to find your Go SDK at /usr/lib/go. 配置环境变量 GOPATH ，放在用户目录(/usr/local/bin)下的 go/ 文件夹放置 Go 相关文件 vim ~/.zshrc # OR ~/.bashrc OR ~/.profile export GOPATH=~/go export PATH=$PATH:$GOPATH/bin 由于某些特殊的原因，国内无法很好地拉取 Go 相关的软件包。建议使用 goproxy/goproxy.cn ，只需在拉取前输入： export GOPROXY=https://goproxy.cn ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:3:2","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#go"},{"categories":null,"content":" 4 修改引导程序安装引导程序 编辑/etc/default/grub 文件。 loglevel=3 nowatchdog sysrq_always_enabled=1 Standard shortcuts sysrq_always_enabled=1 atime options noatime Watchdogs nowatchdog Flat Panel Table Invalid modprobe.blacklist=nouveau DRM kernel mode setting nvidia-drm.modeset=1 Turning barriers off barrier=0 vim /etc/default/grub 最后生成 GRUB 所需的配置文件 grub-mkconfig -o /boot/grub/grub.cfg 编辑 /etc/modprobe.d/blacklist.conf blacklist nouveau options nouveau modeset=0 blacklist iTCO_wdt ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:4:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#修改引导程序"},{"categories":null,"content":" 5 提升makepkg编译速度参考链接：Archlinux 提升 makepkg 速度 ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:5:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#提升makepkg编译速度"},{"categories":null,"content":" 5.1 并行编译编辑/etc/makepkg.conf中MAKEFLAGS， 默认值为MAKEFLAGS=\"-J2\"根据电脑CPU核心数(或线程数)进行修改。 ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:5:1","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#并行编译"},{"categories":null,"content":" 5.2 多线程压缩 #install pigz pbzip2 paru -S pigz pbzip2 #edit /etc/makepkg.conf CFLAGS=\"-march=native -O2 -pipe -fno-plt\" CXXFLAGS=\"-march=native -O2 -pipe -fno-plt\" MAKEFLAGS=\"-j4\" COMPRESSGZ=(pigz -c -f -n -p4) COMPRESSBZ2=(pbzip2 -c -f -p4) COMPRESSXZ=(xz -c -z --threads=0 -) COMPRESSZST=(zstd -1 -c -z -q --threads=0 -) ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:5:2","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#多线程压缩"},{"categories":null,"content":" 6 去除Vscode窗口标题栏参考链接：Archlinux 常用软件安装——VsCode 在设置中搜索Title Bar Style，修改为custom。 ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:6:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#去除vscode窗口标题栏"},{"categories":null,"content":" 7 常用软件 #Feature packed AUR helper sudo pacman -S paru #paru使用技巧 1.使用选项-S使用paru从AUR安装软件包 paru -S package 2.使用paru删除包 paru -Rs package 3.使用paru清除不需要的依赖项 paru -Yc #字体 #weather-icons解决polybar的天气控件图标问题 sudo pacman -S noto-fonts noto-fonts-cjk ttf-sarasa-gothic ttf-font-awesome ttf-twemoji ttf-weather-icons ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:7:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#常用软件"},{"categories":null,"content":" 7.1 Trash-cliTrash-cli中文非官方教程 #比rm -rf保险的删除文件夹，删除文件到回收站里 sudo pacman -S trash-cli trash-put： 删除文件和目录（仅放入回收站中） trash-list ：列出被删除了的文件和目录 trash-restore：从回收站中恢复文件或目录 trash. trash-rm：删除回收站中的文件 trash-empty：清空回收站 ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:7:1","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#trash-cli"},{"categories":null,"content":" 7.2 N卡安装参考链接 打开ctrl+f搜索nvidia就能找到 注：以下均在root模式下进行(用户模式下也得获取管理员权限) 安装最新版的nvidia驱动后，先禁用窗口登陆器的自启动，打开/etc/X11/xorg.conf，注释以下内容 #Section \"Device\" # Identifier \"Device0\" # Driver \"nvidia\" # VendorName \"NVIDIA Corporation\" # BusID \"PCI:1:0:0\" #EndSection 在grub下的linux启动选项中添加modprobe.blacklist=nouveau，完成后，grub-mkconfig -o /boot/grub/grub.cfg刷新下。 之后，生成一个默认的nvidia xorg配置文件， nvidia-xconfig --prime 运行成功，文件将生成在/etgc/X11目录下xorg.conf文件 编辑xorg.conf文件，实现 offload 功能（就是混合模式）。 [更多窗口管理器，参考链接] NVIDIA_Optimus 将以下内容复制粘贴进去(或者修改原文件的内容，与下方一致) 注：BusID可以不用修改 Section \"ServerLayout\" Identifier \"layout\" Screen 0 \"iGPU\" Option \"AllowNVIDIAGPUScreens\" EndSection Section \"Device\" Identifier \"iGPU\" Driver \"modesetting\" BusID \"PCI:0:2:0\" EndSection Section \"Screen\" Identifier \"iGPU\" Device \"iGPU\" EndSection Section \"Device\" Identifier \"nvidia\" Driver \"nvidia\" BusID \"PCI:1:0:0\" EndSection ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:7:2","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#n卡安装"},{"categories":null,"content":" 7.3 docker 配置 clash-premiumSource Link Proxy Providers clash更新订阅时保留自己的规则 docker-compose.yml # docker compose版本 version: '3.7' # 服务列表 services: # clash后台服务 clash: # 设置image image: dreamacro/clash-premium:latest logging: options: max-size: '10m' max-file: '3' volumes: # 将配置文件挂载到容器中 - ./config.yaml:/root/.config/clash/config.yaml - ./Country.mmdb:/root/.config/clash/Country.mmdb # https://github.com/haishanh/yacd - ./ui:/root/.config/clash/ui - ./profiles:/root/.config/clash/profiles container_name: clash environment: - TZ=Asia/Shanghai # TUN cap_add: - NET_ADMIN devices: - /dev/net/tun restart: unless-stopped privileged: true network_mode: \"host\" # or \"host\" on Linux ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:7:3","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#docker-配置-clash-premium"},{"categories":null,"content":" 7.4 docker配置v2rayav2raya_wiki WARNING: IPv4 forwarding is disabled. Networking will not work. 参考：Docker与Linux ip_forward数据包转发 v2raya 中的 ip 转发 也可开启此选项 解决方法： # 检查宿主机的ip_forward cat /proc/sys/net/ipv4/ip_forward # 编辑或修改/etc/sysctl.conf net.ipv4.ip_forward=1 # 查看当前的ip_forward sudo sysctl -p # 重启NetworkManager和docker服务 sudo systemctl restart NetworkManager sudo systemctl restart docker # docker compose版本 version: '3.7' # 服务列表 services: # v2raya后台服务 v2raya: # 设置image image: mzz2017/v2raya:latest logging: options: max-size: '10m' max-file: '3' volumes: # 将配置文件挂载到容器中 - /lib/modules:/lib/modules:ro - /etc/resolv.conf:/etc/resolv.conf - ./xray:/usr/bin/xray - ./geoip.dat:/usr/local/share/xray/geoip.dat - ./geosite.dat:/usr/local/share/xray/geosite.dat - ./v2rayafile:/etc/v2raya container_name: v2raya environment: - V2RAYA_ADDRESS=0.0.0.0:2017 - TZ=Asia/Shanghai - V2RAYA_V2RAY_BIN=/usr/bin/xray - V2RAYA_TRANSPARENT_HOOK=/etc/v2raya/tproxy-hook.sh restart: always privileged: true network_mode: \"host\" # or \"host\" on Linux ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:7:4","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#docker配置v2raya"},{"categories":null,"content":" 7.5 obs-studio在arch kde下录制麦克风音频的时候，出现了即使上噪声抑制依旧无法屏蔽笔记本本身的噪音，这里给出解决办法以及来源 来源：Linux 系統降噪 #编辑文件 sudo nano /etc/pulse/default.pa #将下行加入到“Echo Cancellation”的地方 load-module module-echo-cancel #重启PulseAudio (pulseaudio -k)就解决了 如果遇到在obs运行状态下，修改的以上配置文件，还需重启obs即可。 ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:7:5","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#obs-studio"},{"categories":null,"content":" 7.6 zsharch-zsh-wiki # 查看当前使用的shell echo $SHELL # 查看安装了哪些 Shell chsh -l # 修改当前账户的默认 Shell chsh -s /usr/bin/zsh ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:7:6","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#zsh"},{"categories":null,"content":" 8 ArchLinux-Tips journalctl -p 4 -b -b选项可以筛选出本次boot直到当前的记录 -p选项可以筛选出严重等级高于某一值的记录 “emerg” (0), “alert” (1), “crit” (2), “err” (3), “warning” (4), “notice” (5), “info” (6), “debug” (7) pgrep -l 进程名字(\"进程名字\") sudo journalctl --disk-usage #查看日志大小 sudo journalctl --vacuum-time=5d #超过5天的自动删除 sudo journalctl --vacuum-size=500M #超过500M的自动删除 ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:8:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#archlinux-tips"},{"categories":null,"content":" 9 SSD配置如果安装在SSD上，可以选择以下命令 sudo systemctl enable --now fstrim.timer ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:9:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#ssd配置"},{"categories":null,"content":" 10 i3-networkmanager-dmenu-git-connection-802.1x nmcli connection add type wifi con-name NAME ifname wlan0 ssid SSID -- wifi-sec.key-mgmt wpa-eap 802-1x.eap ttls 802-1x.phase2-auth mschapv2 802-1x.identity USERNAME 其中，NAME是自定义，SSID是链接的名称，USERNAME是用户名。 其余不变。 第一次登录需要额外使用--ask参数 nmcli --ask connection up NAME ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:10:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#i3-networkmanager-dmenu-git-connection-8021x"},{"categories":null,"content":" 11 触控板安装 xf86-input-libinput 包，然后在 /etc/X11/xorg.conf.d 里配置 20-touchpad.conf ，写入以下内容： Section \"InputClass\" Identifier \"libinput touchpad catchall\" MatchIsTouchpad \"on\" MatchDevicePath \"/dev/input/event*\" Driver \"libinput\" Option \"NaturalScrolling\" \"on\" Option \"Tapping\" \"on\" Option \"DisableWhileTyping\" \"on\" EndSection 参考链接：笔记本 ArchLinux 的一些折腾 ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:11:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#触控板"},{"categories":null,"content":" 12 Linux Windows 双系统时间不一致修改 Windows 硬件时钟为 UTC 时间 以管理员身份打开 「PowerShell」，输入以下命令： Reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1 或者打开「注册表编辑器」，定位到 计算机\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation 目录下，新建一个 DWORD 类型，名称为 RealTimeIsUniversal 的键，并修改键值为 1 即可。 参考链接 UTC in Microsoft Windows ","date":"2022-02-13","objectID":"/posts/arch-i3-configuration/:12:0","series":null,"tags":["linux"],"title":"archLinux i3 configuration","uri":"/posts/arch-i3-configuration/#linux-windows-双系统时间不一致"},{"categories":null,"content":" 一定要坚持，要保持长时间学习，甚至终生学习的态度。[左耳朵耗子] 一定要动手，不管例子多么简单，建议至少自己动手敲一遍看看是否理解了里头的细枝末节。[左耳朵耗子] 一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。[左耳朵耗子] 不要乱买书，不要乱追求新技术新名词，基础的东西经过很长时间积累，会在未来至少10年通用。[左耳朵耗子] 回顾一下历史，看看历史时间线上技术的发展，你才能明白明天会是什么样的。[左耳朵耗子] 有时间看书，就先不要看专栏；有时间看专栏，就先不要看各种博客；有条件看官方文档，就先不要看速度教程。[左耳朵耗子] 人生一世，选条路，不退让，不更改，一直走到尽头，是件幸事。[庆余年] 所谓的黑色电影并不是一种类型，它不像西部片和犯罪片那样由环境和冲突来界定，而是由更微妙的调子和情绪特点来界定。[保罗·施耐德《黑色电影札记》] 不结同心人，空结同心草。[[唐]薛涛《春望词四首》其三] 我们当前所站的位置——时间线，往前走是未来，往后看是过去。[黎明之劫] ","date":"2022-02-13","objectID":"/posts/extract/:0:0","series":null,"tags":["tattle"],"title":"extract","uri":"/posts/extract/#"},{"categories":null,"content":"这是网站的第一篇文章，历时半个多月，参阅了很多大佬的文章，感谢各位大佬的分享的优质资源。 链接汇总： 雨临Lewis 就是这个范儿 公子 Hugo部署到Github Ahrisy の 碎碎念 回忆中的明天 南岩666のBlog 少数派 Shuzang’s Blog 小林书架 风月 hugo博客添加评论系统Valine 为什么你没授权就能用大大的作品？？—“知识共享”（CC协议）简单介绍 creativecommons许可协议 友链添加 至此，本站终于建站成功！ 关于首页头像点击后会跳转到Posts下，办法是： 将themes/LoveIt/layouts/partials/home/目录下的profile.html复制到根目录[指：网站根目录]下的对应位置，将文件中的 \u003ca href=\"{{ $url }}\"{{ with .Title | default .Name }} title=\"{{ . }}\"{{ end }}{{ if (urls.Parse $url).Host }} rel=\"noopener noreffer\" target=\"_blank\"{{ end }}\u003e {{- dict \"Src\" $avatar | partial \"plugin/image.html\" -}} \u003c/a\u003e 中的代码修改为 \u003ca {{ if (urls.Parse $url).Host }} rel=\"noopener noreffer\" target=\"_blank\"{{ end }}\u003e {{- dict \"Src\" $avatar | partial \"plugin/image.html\" -}} \u003c/a\u003e 之后鼠标再滑动到这时，就不会变成手掌点击模样了。 ","date":"2022-02-13","objectID":"/posts/build-site/:0:0","series":null,"tags":["tattle"],"title":"build site","uri":"/posts/build-site/#"}]